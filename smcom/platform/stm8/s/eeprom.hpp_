#ifndef EEPROM_STM8S_H
#define EEPROM_STM8S_H

#define FLASH                       ((FLASH_TypeDef *) FLASH_BASE)
#define FLASH_BASE                  (uint16_t)0x5050

#define FLASH_RASS_KEY1             ((uint8_t)0x56)        /*!< First RASS key */
#define FLASH_RASS_KEY2             ((uint8_t)0xAE)        /*!< Second RASS key */
#define FLASH_CLEAR_BYTE            ((uint8_t)0x00)
#define FLASH_SET_BYTE              ((uint8_t)0xFF)
#define EEPROM_START_ADDRESS        ((uint16_t)0x4000)     /* Address of start EEPROM */
#define EEPROM_END_ADDRESS          ((uint16_t)0x4080)     /* Address of end EEPROM */


extern "C" {

void EEPROM_Unlock();
void EEPROM_Lock();
void EEPROM_ProgramByte(uint32_t Address, uint8_t Data);
uint8_t EEPROM_ReadByte(uint32_t Address);
void EEPROM_EraseByte(uint32_t Address);

int __eeprom_wait_for_last_operation(void);
void __eeprom_program_byte(unsigned char __near * dst, unsigned char v);
void __eeprom_program_long(unsigned char __near * dst, unsigned long v);

}

#include "eeprom.c"

#include "../../stavrp.h"

namespace STAVRP {

	namespace STM8S {

		class EEPROMAccessor {
		  public:
			static uint8_t Read(const uint8_t* src) {
				return *src;
			}
			static void ReadBlock(uint8_t* dst, const uint8_t* src, uint16_t size) {
				memcpy(dst, src, size);
			}
			static void Write(uint8_t* dst, uint8_t byte) {
				EEPROM_Unlock();
				while(FLASH_IAPSR_bit.DUL == 0);

				*(__near uint8_t*)dst = byte;

				EEPROM_Lock();
			}
			static void WriteBlock(uint8_t* dst, const uint8_t* src, uint16_t size) {
				EEPROM_Unlock();
				while(FLASH_IAPSR_bit.DUL == 0);

				memcpy(dst, src, size);

				EEPROM_Lock();

			}
		};

		template <typename T, int index=0, typename T2=int>
			class EEPROM {
			  protected:
				static T data;
			  public:
				static const  uint16_t size = sizeof(T);
				static T Get(void) {
					T dst;
					EEPROMAccessor::ReadBlock((uint8_t*)&dst, (uint8_t*)&data, sizeof(T));
					return dst;
				}
				static void Set(T src) { EEPROMAccessor::WriteBlock((uint8_t*)&data, (uint8_t*)&src, sizeof(T)); }
				EEPROM& operator=(const T val) {
					Set(val);
					return *this;
				}
				operator T() { return Get(); }
			};
		template <typename T, int index, typename T2>
			__eeprom T EEPROM<T, index, T2>::data;

		#include "../../common/eeprom_inc.h"

	}
}

#endif