// adopted from http://aterlux.ru/index.php?page=article&art=ntcresistor
// from -40 to +125 with step 0.5
// GND + 10K nts + 10k esistor + VCC

/* Таблица суммарного значения АЦП в зависимости от температуры. От большего значения к меньшему
   Для построения таблицы использованы следующие парамертры:
     R1(T1): 10кОм(25°С)
     B25/50: 3470
     Схема включения: A
     Ra: 10кОм
     Напряжения U0/Uref: 5В/5В

  // number of additive ADC measures
  #define TEMPERATURE_COUNT	64
  // Значение температуры, возвращаемое если сумма результатов АЦП больше первого значения таблицы
  #define TEMPERATURE_UNDER -400
  // Значение температуры, возвращаемое если сумма результатов АЦП меньше последнего значения таблицы
  #define TEMPERATURE_OVER 1250
  // Значение температуры соответствующее первому значению таблицы
  #define TEMPERATURE_TABLE_START -400
  // Шаг таблицы
  #define TEMPERATURE_TABLE_STEP 5
*/

#include "ntc.hpp"

Smcom_flash uint16_t mf52at_10k_40_125_05_data[331] = {
  63077, 63001, 62922, 62842, 62759, 62675, 62588, 62500,
  62409, 62316, 62221, 62124, 62024, 61922, 61817, 61711,
  61602, 61490, 61376, 61260, 61140, 61019, 60895, 60768,
  60638, 60506, 60371, 60234, 60093, 59950, 59804, 59655,
  59504, 59349, 59192, 59031, 58868, 58702, 58533, 58361,
  58185, 58007, 57826, 57642, 57454, 57264, 57071, 56874,
  56675, 56472, 56266, 56058, 55846, 55631, 55413, 55192,
  54968, 54741, 54511, 54278, 54042, 53803, 53561, 53317,
  53069, 52818, 52565, 52309, 52050, 51788, 51523, 51256,
  50986, 50714, 50439, 50162, 49882, 49599, 49315, 49027,
  48738, 48446, 48153, 47857, 47559, 47259, 46957, 46653,
  46348, 46040, 45731, 45420, 45108, 44794, 44479, 44162,
  43845, 43525, 43205, 42884, 42561, 42238, 41914, 41589,
  41263, 40937, 40609, 40282, 39954, 39626, 39297, 38968,
  38639, 38310, 37981, 37652, 37323, 36994, 36666, 36337,
  36010, 35682, 35356, 35029, 34704, 34379, 34055, 33732,
  33410, 33088, 32768, 32449, 32131, 31814, 31498, 31184,
  30871, 30559, 30249, 29940, 29633, 29327, 29023, 28720,
  28420, 28121, 27823, 27528, 27234, 26942, 26652, 26365,
  26079, 25794, 25512, 25232, 24954, 24679, 24405, 24133,
  23864, 23596, 23331, 23068, 22807, 22548, 22292, 22038,
  21786, 21536, 21288, 21043, 20800, 20560, 20321, 20085,
  19851, 19619, 19390, 19163, 18938, 18715, 18495, 18277,
  18061, 17848, 17636, 17427, 17220, 17015, 16813, 16613,
  16415, 16219, 16025, 15833, 15644, 15456, 15271, 15088,
  14907, 14728, 14551, 14376, 14203, 14032, 13864, 13697,
  13532, 13369, 13208, 13049, 12892, 12736, 12583, 12431,
  12282, 12134, 11988, 11844, 11701, 11560, 11421, 11284,
  11148, 11015, 10882, 10752, 10623, 10495, 10370, 10246,
  10123, 10002, 9882, 9764, 9648, 9533, 9419, 9307,
  9196, 9087, 8979, 8873, 8768, 8664, 8561, 8460,
  8360, 8262, 8164, 8068, 7974, 7880, 7788, 7696,
  7606, 7518, 7430, 7343, 7258, 7173, 7090, 7008,
  6927, 6847, 6768, 6690, 6613, 6537, 6462, 6387,
  6314, 6242, 6171, 6101, 6031, 5963, 5895, 5828,
  5762, 5697, 5633, 5570, 5507, 5445, 5384, 5324,
  5265, 5206, 5148, 5091, 5034, 4979, 4924, 4869,
  4816, 4763, 4710, 4659, 4608, 4558, 4508, 4459,
  4410, 4363, 4315, 4269, 4223, 4177, 4132, 4088,
  4044, 4001, 3959, 3916, 3875, 3834, 3793, 3753,
  3714, 3674, 3636, 3598, 3560, 3523, 3486, 3450,
  3414, 3379, 3344
};

uint16_t mf52at_10k_40_125_05_func(uint16_t index) { return flash_getbyte(mf52at_10k_40_125_05_data[index]); }

typedef Smcom::SoftDrv::NTC::NTCData<mf52at_10k_40_125_05_func, sizeof(mf52at_10k_40_125_05_data), 64, -400, 1250, 5>  mf52at_10k_40_125_05;
  
